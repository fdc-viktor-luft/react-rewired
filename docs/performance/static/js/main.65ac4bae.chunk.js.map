{"version":3,"sources":["rewired/rewired-store.js","common/DisplayValues.js","rewired/RewiredDisplayValues.js","common/event-util.js","common/event-dispatcher.js","common/stress-test.js","common/util.js","rewired/RewiredOneInput.js","rewired/RewiredDeeplyNested.js","rewired/RewiredFeedback.js","rewired/RewiredManyFlat.js","rewired/RewiredManyComponents.js","rewired/RewiredAppContent.js","rewired/RewiredApp.js","redux/ReduxDisplayValues.js","redux/ReduxOneInput.js","redux/ReduxDeeplyNested.js","redux/ReduxFeedback.js","redux/ReduxManyFlat.js","redux/ReduxManyComponents.js","redux/ReduxAppContent.js","redux/reducer/one-input-reducer.js","redux/reducer/deeply-nested-reducer.js","redux/reducer/many-flat-reducer.js","redux/reducer/live-coding-reducer.js","redux/reducer/root-reducer.js","redux/reducer/many-components-reducer.js","redux/redux-store.js","redux/ReduxApp.js","routes.js","Navigator.js","App.js","index.js"],"names":["deeplyNested","Wired","node","a","b","c","d","e","f","g","initialManyFlat","split","reduce","p","RewiredStore","store","oneInput","value","color","manyFlat","liveCoding","manyComponents","window","sanitize","str","replace","span","className","withMargin","innerHTML","htmlForObject","o","_htmlForObject","firstValueOverride","result","firstValue","key","hasOwnProperty","valueType","String","Array","isArray","JSON","stringify","DisplayValues","data","dangerouslySetInnerHTML","__html","RewiredDisplayValues","wire","EventUtil","cb","event","preventDefault","target","change","type","parsed","Number","isNaN","undefined","convertToNumber","nativeInputValueSetter","Object","getOwnPropertyDescriptor","HTMLInputElement","prototype","set","inputElement","call","Event","bubbles","dispatchEvent","EventDispatcher","doXTimes","times","handler","counter","start","performance","now","_handler","console","log","Math","ceil","i","setTimeout","changeXTimesInput","inputId","input","document","getElementById","tagName","toLowerCase","index","uuid","random","toString","StressTest","onClick","Util","floor","onChangeInput","v","RewiredOneInput","id","style","backgroundColor","onChange","num","renderCounter","RewiredDeeplyNested","RewiredFeedback","flatNames","next","RewiredManyFlat","keys","map","componentNames","RewiredComponent","name","ManyComponents","RewiredManyComponents","RewiredAppContent","current","RewiredApp","root","ReduxDisplayValues","connect","ReduxOneInput","dispatch","updateValue","ReduxDeeplyNested","update","ReduxFeedback","ReduxManyFlat","ReduxComponent","ReduxManyComponents","ReduxAppContent","oneInputReducer","combineReducers","state","action","deeplyNestedReducer","flatReducer","flatReducers","manyFlatReducer","liveCodingReducer","dummy","rootReducer","ReduxStore","createStore","applyMiddleware","thunk","ReduxApp","Routes","label","Navigator","open","toggle","setState","navigate","to","props","render","r","Component","App","localStorage","getItem","setItem","this","ReactDOM"],"mappings":"yRAgBaA,EAAeC,IAAMC,KAAwB,CACtDC,EAAGF,IAAMC,KAAK,CACVE,EAAGH,IAAMC,KAAK,CACVG,EAAGJ,IAAMC,KAAK,CAAEI,EAAGL,IAAMC,KAAK,CAAEK,EAAGN,IAAMC,KAAK,CAAEM,EAAGP,IAAMC,KAAK,CAAEO,EAAG,gBAKzEC,EAAwC,6BACzCC,MAAM,IACNC,OAAO,SAACC,EAAGR,GAAJ,OAAWQ,EAAER,GAAK,IAAMQ,GAAG,IAY1BC,EAAeb,IAAMc,MAAa,CAC3CC,SAAUf,IAAMC,KAlCI,CACpBe,MAAO,GACPC,MAAO,YAiCPlB,eACAmB,SAAUlB,IAAMC,KAAKQ,GACrBU,WAAYnB,IAAMC,KAAK,IACvBmB,eAAgB,IAGpBC,OAAOR,aAAeA,ECpCtB,IAAMS,EAAW,SAACC,GACd,OAAOA,EAAIC,QAAQ,KAAM,QAAQA,QAAQ,KAAM,SAG7CC,EAAO,SAACC,EAAmBV,GAApB,6BAA8DU,EAA9D,aAA4EV,EAA5E,YAEPW,EAAa,SAACC,GAAD,qCAAuDA,EAAvD,eA0CbC,EAAgB,SAACC,GAAD,wBAAkCH,EAxCjC,SAAjBI,EAAkBD,GAA2D,IAAhDE,IAA+C,yDAC1EC,EAAS,GACTC,EAAaF,EAEjB,IAAK,IAAIG,KAAOL,EACZ,GAAIA,EAAEM,eAAeD,GAAM,CACvB,IAAMnB,EAAQc,EAAEK,GACXD,EAGDA,GAAa,EAFbD,GAAU,WAIdA,GAAUR,EAAK,OAAQU,GACvBF,GAAU,KACV,IAAMI,EAAsB,OAAVrB,EAAiB,cAAgBA,EACnD,OAAQqB,GACJ,IAAK,SACDJ,GAAUR,EAAK,SAAD,WAAeH,EAAUN,GAAzB,MACd,SACJ,IAAK,UACL,IAAK,SACL,IAAK,YACL,IAAK,OACDiB,GAAUR,EAAKY,EAAWC,OAAOtB,IACjC,SACJ,IAAK,SACGuB,MAAMC,QAAQxB,GACdiB,GAAUX,EAASmB,KAAKC,UAAU1B,IAElCiB,GAAM,eAAYN,EAAWI,EAAgBf,IAAvC,QAEV,SACJ,QACIiB,GAAUX,EAASmB,KAAKC,UAAU1B,KAIlD,OAAOiB,EAGwDF,CAAeD,IAA5D,UAGTa,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACzB,6BACI,0BAAMC,wBAAyB,CAAEC,OAAQjB,EAAce,QCvDlDG,EAAuBlC,EAAamC,KAC7CL,EACA,SAAAC,GAAI,MAAK,CAAEA,UCeFK,EARQ,SAACC,GAAD,OAAiD,SAAAC,GAClEA,EAAMC,iBACN,IAAMC,EAASF,EAAME,OACfC,EAASD,EAAOrC,MAChBA,EAAwB,WAAhBqC,EAAOE,KAVD,SAACvC,GACrB,GAAKA,EAAL,CACA,IAAMwC,EAASC,OAAOzC,GACtB,OAAO0C,MAAMF,QAAUG,EAAYH,GAOMI,CAAgBN,GAAUA,EAC/DJ,GAAIA,EAAGlC,KCpBT6C,EAA0BC,OAAOC,yBAAyB1C,OAAO2C,iBAAiBC,UAAW,SAAeC,IAE5GZ,EAAS,SAACa,EAAmBnD,GAC/B6C,EAAuBO,KAAKD,EAAcnD,GAC1C,IAAMV,EAAI,IAAI+D,MAAM,QAAS,CAAEC,SAAS,IACxCH,EAAaI,cAAcjE,IAQlBkE,EAAoBlB,ECJ3BmB,EAAW,SAACC,EAAeC,GAAhB,OAA4C,WAQzD,IAPA,IAAIC,EAAU,EACRC,EAAQC,YAAYC,MACpBC,EAAW,WAEbL,IADAC,GAEIA,IAAYF,GAAOO,QAAQC,IAAI,cAAeC,KAAKC,KAAKN,YAAYC,MAAQF,KAE3EQ,EAAI,EAAGA,EAAIX,EAAOW,IAAKhE,OAAOiE,WAAWN,EAAU,KAG1DO,EAAoB,SAACb,EAAec,GAAhB,OAAoC,WAC1D,IAAMC,EAAQC,SAASC,eAAeH,GAClCC,GAAyC,UAAhCA,EAAMG,QAAQC,eACvBpB,EAASC,EAAO,SAAAoB,GAAK,OAAItB,EAAuBiB,EAAOnD,OAAOwD,GAAS,MAjBlE,SAAPC,EAAQ7F,GAAD,OACTA,GAAKA,EAAsB,GAAhBiF,KAAKa,UAAmB9F,EAAI,GAAK+F,SAAS,KAAQ,CAAC,MAAc,KAAO,KAAKzE,QAAQ,SAAUuE,GAgBvBA,KAA/EtB,KAcKyB,EARS,SAAC,GAAD,IAAGV,EAAH,EAAGA,QAASd,EAAZ,EAAYA,MAAZ,OAClB,4BAAQyB,QAASZ,EAAkBb,EAAOc,IAA1C,UAA4Dd,EAA5D,WAOSwB,EAJK,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASzB,EAAZ,EAAYA,MAAZ,OACd,4BAAQyB,QAAS1B,EAASC,EAAOyB,IAAjC,MAA+CzB,EAA/C,WChCS0B,EAFO,iBAAM,UAAU5E,QAAQ,KAAM,kBAAM2D,KAAKkB,MAAsB,GAAhBlB,KAAKa,UAAeC,SAAS,OCO1FK,EAAgBrD,EAAuB,SAAAsD,GAAC,OAC1C1F,EAAaqD,IAAI,CAAEnD,SAAU,CAAEC,MAAOuF,EAAGtF,MAAOmF,SAqBvCI,EAAkB3F,EAAamC,KAdJ,SAAC,GAAD,IAAGhC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACpC,yBAAKS,UAAU,aACX,kBAACqB,EAAD,MACA,2BACI0D,GAAG,gBACHlD,KAAK,OACLvC,MAAOA,EACP0F,MAAO,CAAEC,gBAAiB1F,GAC1B2F,SAAUN,IAEd,kBAACJ,EAAD,CAA0BV,QAAQ,gBAAgBd,MAAO,QAM7D,gBAAG3D,EAAH,EAAGA,SAAH,MAAmB,CACfC,MAAOD,EAASC,MAChBC,MAAOF,EAASE,SC7BlBkF,EAAU,SAACU,GAAD,OACZhG,EAAaqD,IAAI,CAAEnE,aAAc,CAAEG,EAAG,CAAEC,EAAG,CAAEC,EAAG,CAAEC,EAAG,CAAEC,EAAG,CAAEC,EAAG,CAAEC,EAAGqG,YAMpEC,EAAgB,EASPC,EAAsBlG,EAAamC,KARX,SAAC,GAAD,IAAG6D,EAAH,EAAGA,IAAH,OACjC,yBAAKnF,UAAU,iBACX,yBAAKA,UAAU,WAAWmF,GAC1B,kBAACX,EAAD,CAAsBC,QAASA,EAASzB,MAAO,MAC/C,yBAAKhD,UAAU,oBAAoBoF,KAMvC,kBAAuB,CACnBD,IADJ,EAAG9G,aACmBG,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,KCpBzBwG,EAAkB,kBAC3B,yBAAKtF,UAAU,oBAaX,+DAbJ,qECAEuF,EAAY,6BAA6BvG,MAAM,IAQ/CyF,EAAU,SAACU,GAAD,OAAiBhG,EAAaqD,IAAI,CAAEhD,UAN5BgG,EAMqDL,EALzEI,EAAUtG,OAAO,SAACC,EAAGR,GAEjB,OADAQ,EAAER,GAAK8G,EACAtG,GACR,OAJgB,IAACsG,GAYpBJ,EAAgB,EAaPK,EAAkBtG,EAAamC,KAZX,SAAC,GAAD,IAAG9B,EAAH,EAAGA,SAAH,OAC7B,yBAAKQ,UAAU,aACVoC,OAAOsD,KAAKlG,GAAUmG,IAAI,SAAAlF,GAAG,OAC1B,yBAAKT,UAAU,cAAcS,IAAKA,GAC7BA,EADL,KACYjB,EAASiB,MAGzB,kBAAC+D,EAAD,CAAsBC,QAASA,EAASzB,MAAO,MAC/C,yBAAKhD,UAAU,oBAAoBoF,KAMvC,kBAAmB,CAAE5F,SAArB,EAAGA,YC7BDoG,EAAiB,6BAA6B5G,MAAM,IAY7C6G,EAAmB1G,EAAamC,KANX,SAAC,GAAD,IAAGwE,EAAH,EAAGA,KAAMX,EAAT,EAASA,IAAT,OAC9B,yBAAKnF,UAAU,eACV8F,EADL,KACaX,IAMb,kBAAyB,CAAEA,IAA3B,EAAGzF,kBAGDqG,EAAiB,kBACnBH,EAAeD,IAAI,SAACG,EAAMrF,GAAP,OAAe,kBAACoF,EAAD,CAAkBC,KAAMA,EAAMrF,IAAKA,OAEnEgE,EAAU,SAACU,GAAD,OAAiBhG,EAAaqD,IAAI,CAAE9C,eAAgByF,KAEhEC,EAAgB,EACPY,EAAwB,kBACjC,yBAAKhG,UAAU,mBACX,kBAAC,EAAD,MACA,kBAACwE,EAAD,CAAsBC,QAASA,EAASzB,MAAO,MAC/C,yBAAKhD,UAAU,oBAAoBoF,KCrB9Ba,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAC7B,6BACI,yBAAKlG,UAAU,SAAf,WACA,yBAAKA,UAAU,WACE,UAAZkG,GAAuB,kBAAC,EAAD,MACX,cAAZA,GAA2B,kBAACpB,EAAD,MACf,kBAAZoB,GAA+B,kBAACb,EAAD,MACnB,cAAZa,GAA2B,kBAACT,EAAD,MACf,oBAAZS,GAAiC,kBAAC,EAAD,SCXjCC,EAAa,SAAC,GAAD,IAAGD,EAAH,EAAGA,QAAH,OACtB,kBAAC/G,EAAaiH,KAAd,KACI,kBAAC,EAAD,CAAmBF,QAASA,M,eCNvBG,EAAqBC,YAAQ,SAAApF,GAAI,MAAK,CAAEA,SAAnBoF,CAA4BrF,GCajDsF,EAAgBD,YACzB,gBAAGjH,EAAH,EAAGA,SAAH,MAAmB,CAAEC,MAAOD,EAASC,MAAOC,MAAOF,EAASE,QAC5D,SAAAiH,GAAQ,MAAK,CACTC,YAAalF,EAAuB,SAAAsD,GAAC,OAAI2B,EAAS,CAAE3E,KAAM,oBAAqBD,OAAQiD,QAHlEyB,CARE,SAAC,GAAD,IAAGhH,EAAH,EAAGA,MAAOmH,EAAV,EAAUA,YAAalH,EAAvB,EAAuBA,MAAvB,OAC3B,yBAAKS,UAAU,aACX,kBAACqG,EAAD,MACA,2BAAOtB,GAAG,cAAclD,KAAK,OAAOmD,MAAO,CAAEC,gBAAiB1F,GAASD,MAAOA,EAAO4F,SAAUuB,IAC/F,kBAACjC,EAAD,CAA0BV,QAAQ,cAAcd,MAAO,SCN3DoC,EAAgB,EASPsB,GAAoBJ,YAC7B,kBAAuB,CAAEnB,IAAzB,EAAG9G,aAAwCG,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,IACvD,SAAA0H,GAAQ,MAAK,CACTG,OAAQ,SAAAxB,GAAG,OAAIqB,EAAS,CAAE3E,KAAM,cAAe8E,OAAQxB,OAH9BmB,CARE,SAAC,GAAD,IAAGnB,EAAH,EAAGA,IAAKwB,EAAR,EAAQA,OAAR,OAC/B,yBAAK3G,UAAU,iBACX,yBAAKA,UAAU,WAAWmF,GAC1B,kBAACX,EAAD,CAAsBC,QAASkC,EAAQ3D,MAAO,MAC9C,yBAAKhD,UAAU,oBAAoBoF,MCR9BwB,GAAgB,kBACzB,yBAAK5G,UAAU,kBAaX,+DCXJoF,GAAgB,EAaPyB,GAAgBP,YACzB,kBAAmB,CAAE9G,SAArB,EAAGA,WACH,SAAAgH,GAAQ,MAAK,CACTG,OAAQ,SAAAxB,GAAG,OAAIqB,EAAS,CAAE3E,KAAM,cAAe8E,OAAQxB,OAHlCmB,CAZE,SAAC,GAAD,IAAG9G,EAAH,EAAGA,SAAUmH,EAAb,EAAaA,OAAb,OAC3B,yBAAK3G,UAAU,aACVoC,OAAOsD,KAAKlG,GAAUmG,IAAI,SAAAlF,GAAG,OAC1B,yBAAKT,UAAU,cAAcS,IAAKA,GAC7BA,EADL,KACYjB,EAASiB,MAGzB,kBAAC+D,EAAD,CAAsBC,QAASkC,EAAQ3D,MAAO,MAC9C,yBAAKhD,UAAU,oBAAoBoF,OCXrCQ,GAAiB,6BAA6B5G,MAAM,IAU7C8H,GAAiBR,YAAQ,kBAAyB,CAAEnB,IAA3B,EAAGzF,iBAAX4G,CANE,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAMX,EAAT,EAASA,IAAT,OAC5B,yBAAKnF,UAAU,eACV8F,EADL,KACaX,KAMXY,GAAiB,kBACnBH,GAAeD,IAAI,SAACG,EAAMrF,GAAP,OAAe,kBAACqG,GAAD,CAAgBhB,KAAMA,EAAMrF,IAAKA,OAInE2E,GAAgB,EASP2B,GAAsBT,YAC/B,kBAAmB,CAAE9G,SAArB,EAAGA,WACH,SAAAgH,GAAQ,MAAK,CACTG,OAAQ,SAAAxB,GAAG,OAAIqB,EAAS,CAAE3E,KAAM,yBAA0B8E,OAAQxB,OAHvCmB,CARS,SAAC,GAAD,IAAGK,EAAH,EAAGA,OAAH,OACxC,yBAAK3G,UAAU,mBACX,kBAAC,GAAD,MACA,kBAACwE,EAAD,CAAsBC,QAASkC,EAAQ3D,MAAO,MAC9C,yBAAKhD,UAAU,oBAAoBoF,OChB9B4B,GAAkB,SAAC,GAAD,IAAGd,EAAH,EAAGA,QAAH,OAC3B,6BACI,yBAAKlG,UAAU,SAAf,SACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,WACE,UAAZkG,GAAuB,kBAAC,GAAD,MACX,cAAZA,GAA2B,kBAACK,EAAD,MACf,kBAAZL,GAA+B,kBAACQ,GAAD,MACnB,cAAZR,GAA2B,kBAACW,GAAD,MACf,oBAAZX,GAAiC,kBAACa,GAAD,U,iBCGrCE,GAAkBC,aAAgB,CAAE5H,MAlB5B,WAAyC,IAAxC6H,EAAuC,uDAAvB,GAAIC,EAAmB,uCACzD,OAAQA,EAAOvF,MACX,IAAK,oBACD,OAAOuF,EAAOxF,OAClB,QACI,OAAOuF,IAamD5H,MATjD,WAAgD,IAA/C4H,EAA8C,uDAA9B,UAAWC,EAAmB,uCAChE,OAAQA,EAAOvF,MACX,IAAK,oBACD,OAAO6C,IACX,QACI,OAAOyC,MCNNE,GAAsBH,aAAgB,CAC/C1I,EAAG0I,aAAgB,CACfzI,EAAGyI,aAAgB,CACfxI,EAAGwI,aAAgB,CACfvI,EAAGuI,aAAgB,CAAEtI,EAAGsI,aAAgB,CAAErI,EAAGqI,aAAgB,CAAEpI,EAbvD,WAAwC,IAAvCqI,EAAsC,uDAAtB,EAAGC,EAAmB,uCAC3D,OAAQA,EAAOvF,MACX,IAAK,cACD,OAAOuF,EAAOT,OAClB,QACI,OAAOQ,kB,sOCLnB,IAAMG,GAAc,WAAwC,IAAvCH,EAAsC,uDAAtB,EAAGC,EAAmB,uCACvD,OAAQA,EAAOvF,MACX,IAAK,cACD,OAAOuF,EAAOT,OAClB,QACI,OAAOQ,IAIbI,GAAe,6BAA6BvI,MAAM,IAAIC,OAAO,SAACC,EAAGR,GAAJ,OAAWQ,EAAER,GAAK4I,KAAgBpI,GAAG,IAE3FsI,GAAkBN,a,wVAAgB,CAAD,GACvCK,KCLME,GAAoBP,aAAgB,CAAEQ,MAP9B,WAAwC,IAAvCP,EAAsC,uDAAtB,EAAGC,EAAmB,uCAGhD,OAFAA,EAAOvF,KAEAsF,KCCNQ,GAAcT,aAAgB,CACvC7H,SAAU4H,GACV5I,aAAcgJ,GACd7H,SAAUgI,GACV9H,eCTiC,WAAwC,IAAvCyH,EAAsC,uDAAtB,EAAGC,EAAmB,uCACxE,OAAQA,EAAOvF,MACX,IAAK,yBACD,OAAOuF,EAAOT,OAClB,QACI,OAAOQ,IDKf1H,WAAYgI,KERHG,GAAaC,aAAYF,GAAaG,aAAgBC,OAEnEpI,OAAOiI,WAAaA,GCEb,IAAMI,GAAW,SAAC,GAAD,IAAG9B,EAAH,EAAGA,QAAH,OACpB,kBAAC,IAAD,CAAU9G,MAAOwI,IACb,kBAAC,GAAD,CAAiB1B,QAASA,MCRrB+B,GAAkB,CAC3B,CAAEC,MAAO,QAAS5I,MAAO,SACzB,CAAE4I,MAAO,YAAa5I,MAAO,aAC7B,CAAE4I,MAAO,gBAAiB5I,MAAO,iBACjC,CAAE4I,MAAO,YAAa5I,MAAO,aAC7B,CAAE4I,MAAO,kBAAmB5I,MAAO,mBACnC,CAAE4I,MAAO,cAAe5I,MAAO,gBCFtB6I,GAAb,2MACIhB,MAAwB,CAAEiB,MAAM,GADpC,EAEIC,OAAS,kBAAM,EAAKC,SAAS,kBAAe,CAAEF,MAAjB,EAAGA,SAFpC,EAGIG,SAAW,SAACC,GAAD,OAAoB,WAAO,IAAD,EACH,EAAKC,MAA3BvC,EADyB,EACzBA,QAASqC,EADgB,EAChBA,SACbrC,IAAYsC,IACZD,EAASC,GACT,EAAKF,SAAS,CAAEF,MAAM,OAPlC,EAUIM,OAAS,WAAO,IACJN,EAAS,EAAKjB,MAAdiB,KACAlC,EAAY,EAAKuC,MAAjBvC,QACR,OACI,6BACI,yBAAKlG,UAAU,OAAOyE,QAAS,EAAK4D,QAApC,QAGCD,GACG,yBAAKpI,UAAU,QACViI,GAAOtC,IAAI,SAAAgD,GAAC,OACT,yBACIlI,IAAKkI,EAAErJ,MACPU,UAAW,SAAWkG,IAAYyC,EAAErJ,MAAQ,WAAa,IACzDmF,QAAS,EAAK8D,SAASI,EAAErJ,QACxBqJ,EAAET,YAzBnC,6BAA+BU,aC4BhBC,G,2MAxBX1B,MAAkB,CAAEjB,QAAU4C,aAAaC,QAAQ,YAAoB,S,EACvER,SAAW,SAAC/C,GACRsD,aAAaE,QAAQ,UAAWxD,GAChC,EAAK8C,SAAS,CAAEpC,QAASV,K,wEAEnB,IACEU,EAAY+C,KAAK9B,MAAjBjB,QACR,OACI,yBAAKlG,UAAU,OACX,gCACI,kBAAC,GAAD,CAAWuI,SAAUU,KAAKV,SAAUrC,QAASA,IAC7C,yBAAKlG,UAAU,SAAf,sBAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAYkG,QAASA,KAEzB,yBAAKlG,UAAU,SACX,kBAAC,GAAD,CAAUkG,QAASA,U,GAlBrB0C,aCFZxC,GAAOpC,SAASC,eAAe,QACrCmC,IAAQ8C,IAASR,OAAO,kBAAC,GAAD,MAAStC,M","file":"static/js/main.65ac4bae.chunk.js","sourcesContent":["// @flow\n\nimport { Wired, type WiredNode } from 'react-rewired';\n\ntype OneInputState = { value: string, color: string };\nconst initialOneInput = {\n    value: '',\n    color: '#eeff8e',\n};\n\ntype DeeplyNestedState = {\n    a: WiredNode<{\n        b: WiredNode<{ c: WiredNode<{ d: WiredNode<{ e: WiredNode<{ f: WiredNode<{ g: number }> }> }> }> }>,\n    }>,\n};\n\nexport const deeplyNested = Wired.node<DeeplyNestedState>({\n    a: Wired.node({\n        b: Wired.node({\n            c: Wired.node({ d: Wired.node({ e: Wired.node({ f: Wired.node({ g: 0 }) }) }) }),\n        }),\n    }),\n});\n\nconst initialManyFlat: { [string]: number } = 'abcdefghijklmnopqrstuvwxyz'\n    .split('')\n    .reduce((p, c) => (p[c] = 0) || p, {});\n\ntype LifeCodingState = {};\n\ntype State = {\n    oneInput: WiredNode<OneInputState>,\n    deeplyNested: typeof deeplyNested,\n    manyFlat: typeof initialManyFlat,\n    liveCoding: WiredNode<LifeCodingState>,\n    manyComponents: number,\n};\n\nexport const RewiredStore = Wired.store<State>({\n    oneInput: Wired.node(initialOneInput),\n    deeplyNested,\n    manyFlat: Wired.node(initialManyFlat),\n    liveCoding: Wired.node({}),\n    manyComponents: 0,\n});\n\nwindow.RewiredStore = RewiredStore;\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\n\nconst sanitize = (str: string): string => {\n    return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\nconst span = (className: string, value: string): string => `<span class=\"${className}\">${value}</span>`;\n\nconst withMargin = (innerHTML: string): string => `<div class=\"ml-3\"><p>${innerHTML}</p></div>`;\n\nconst _htmlForObject = (o: Object, firstValueOverride: boolean = true): string => {\n    let result = '';\n    let firstValue = firstValueOverride;\n    // eslint-disable-next-line no-unused-vars\n    for (let key in o) {\n        if (o.hasOwnProperty(key)) {\n            const value = o[key];\n            if (!firstValue) {\n                result += ',</p><p>';\n            } else {\n                firstValue = false;\n            }\n            result += span('prop', key);\n            result += ': ';\n            const valueType = value === null ? 'null' : typeof value;\n            switch (valueType) {\n                case 'string':\n                    result += span('string', `\"${sanitize((value: any))}\"`);\n                    continue;\n                case 'boolean':\n                case 'number':\n                case 'undefined':\n                case 'null':\n                    result += span(valueType, String(value));\n                    continue;\n                case 'object':\n                    if (Array.isArray(value)) {\n                        result += sanitize(JSON.stringify(value));\n                    } else {\n                        result += `{</p>${withMargin(_htmlForObject((value: any)))}<p>}`;\n                    }\n                    continue;\n                default:\n                    result += sanitize(JSON.stringify(value));\n            }\n        }\n    }\n    return result;\n};\n\nconst htmlForObject = (o: Object): string => `<p>{</p>${withMargin(_htmlForObject(o))}</p>}`;\n\ntype DisplayValuesProps = {| data: Object |};\nexport const DisplayValues = ({ data }: DisplayValuesProps) => (\n    <pre>\n        <code dangerouslySetInnerHTML={{ __html: htmlForObject(data) }} />\n    </pre>\n);\n","// @flow\n\nimport { RewiredStore } from './rewired-store';\nimport { DisplayValues } from '../common/DisplayValues';\n\ntype RewiredDisplayValuesStoreProps = {| data: Object |};\ntype RewiredDisplayValuesOwnProps = {||};\n\nexport const RewiredDisplayValues = RewiredStore.wire<RewiredDisplayValuesStoreProps, RewiredDisplayValuesOwnProps>(\n    DisplayValues,\n    data => ({ data })\n);\n","/**\n * This file is part of svg-editor which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\ntype InputEvent = { preventDefault: Function, target: { type?: string, value: any } };\ntype InputEventHandler = InputEvent => void;\n\nconst convertToNumber = (value: string): number | void => {\n    if (!value) return undefined;\n    const parsed = Number(value);\n    return isNaN(parsed) ? undefined : parsed;\n};\n\nconst inputHandler = (cb?: any => mixed | void): InputEventHandler => event => {\n    event.preventDefault();\n    const target = event.target;\n    const change = target.value;\n    const value = target.type === 'number' ? convertToNumber(change) : change;\n    if (cb) cb(value);\n};\n\nexport const EventUtil = { inputHandler };\n","// @flow\n\nconst nativeInputValueSetter = (Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value'): any).set;\n\nconst change = (inputElement: any, value: string) => {\n    nativeInputValueSetter.call(inputElement, value);\n    const e = new Event('input', { bubbles: true });\n    inputElement.dispatchEvent(e);\n};\n\nconst changeById = (id: string, value: string) => {\n    const input = document.getElementById(id);\n    if (input && input.tagName === 'input') change(input, value);\n};\n\nexport const EventDispatcher = { change, changeById };\n","// @flow\n\nimport React from 'react';\nimport { EventDispatcher } from './event-dispatcher';\n\n// optimized as much as possible\n// call this function without arguments to generate a new uuid\ntype UuidParam = void;\nconst uuid = (a: UuidParam): string =>\n    a ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16) : (([1e7]: any) + -1e3 + -4e3).replace(/[018]/g, uuid);\n\nconst doXTimes = (times: number, handler: number => void) => () => {\n    let counter = 0;\n    const start = performance.now();\n    const _handler = () => {\n        counter++;\n        handler(counter);\n        if (counter === times) console.log('duration ms', Math.ceil(performance.now() - start));\n    };\n    for (let i = 0; i < times; i++) window.setTimeout(_handler, 0);\n};\n\nconst changeXTimesInput = (times: number, inputId: string) => () => {\n    const input = document.getElementById(inputId);\n    if (input && input.tagName.toLowerCase() === 'input')\n        doXTimes(times, index => EventDispatcher.change(input, String(index) + ' - ' + uuid()))();\n};\n\n// 100'000 changes take for both ~ 200 sec\n// 10'000 changes take for both ~ 15 - 16 sec --> should be the ideal choice for demonstration\n// 1'000 changes take for both ~ 1.5 - 1.6 sec\nconst ButtonChangeX = ({ inputId, times }: {| inputId: string, times: number |}) => (\n    <button onClick={changeXTimesInput(times, inputId)}>Change {times} times</button>\n);\n\nconst ButtonDoX = ({ onClick, times }: {| onClick: number => void, times: number |}) => (\n    <button onClick={doXTimes(times, onClick)}>Do {times} times</button>\n);\n\nexport const StressTest = { ButtonChangeX, ButtonDoX };\n","// @flow\n\nconst randomColor = () => '#xxxxxx'.replace(/x/g, () => Math.floor(Math.random() * 16).toString(16));\n\nexport const Util = { randomColor };\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { RewiredDisplayValues } from './RewiredDisplayValues';\nimport { EventUtil } from '../common/event-util';\nimport { StressTest } from '../common/stress-test';\nimport { Util } from '../common/util';\n\nconst onChangeInput = EventUtil.inputHandler(v =>\n    RewiredStore.set({ oneInput: { value: v, color: Util.randomColor() } })\n);\n\ntype RewiredOneInputStoreProps = {| value: string, color: string |};\ntype RewiredOneInputOwnProps = {||};\nexport type RewiredOneInputProps = {| ...RewiredOneInputStoreProps, ...RewiredOneInputOwnProps |};\n\nexport const RewiredOneInputContainer = ({ value, color }: RewiredOneInputProps) => (\n    <div className=\"one-input\">\n        <RewiredDisplayValues />\n        <input\n            id=\"rewired-input\"\n            type=\"text\"\n            value={value}\n            style={{ backgroundColor: color }}\n            onChange={onChangeInput}\n        />\n        <StressTest.ButtonChangeX inputId=\"rewired-input\" times={10000} />\n    </div>\n);\n\nexport const RewiredOneInput = RewiredStore.wire<RewiredOneInputStoreProps, RewiredOneInputOwnProps>(\n    RewiredOneInputContainer,\n    ({ oneInput }) => ({\n        value: oneInput.value,\n        color: oneInput.color,\n    })\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst onClick = (num: number) =>\n    RewiredStore.set({ deeplyNested: { a: { b: { c: { d: { e: { f: { g: num } } } } } } } });\n\ntype RewiredDeeplyNestedStoreProps = {| num: number |};\ntype RewiredDeeplyNestedOwnProps = {||};\ntype RewiredDeeplyNestedProps = {| ...RewiredDeeplyNestedStoreProps, ...RewiredDeeplyNestedOwnProps |};\n\nlet renderCounter = 0;\nconst RewiredDeeplyNestedContainer = ({ num }: RewiredDeeplyNestedProps) => (\n    <div className=\"deeply-nested\">\n        <div className=\"big-num\">{num}</div>\n        <StressTest.ButtonDoX onClick={onClick} times={100000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const RewiredDeeplyNested = RewiredStore.wire<RewiredDeeplyNestedStoreProps, RewiredDeeplyNestedOwnProps>(\n    RewiredDeeplyNestedContainer,\n    ({ deeplyNested }) => ({\n        num: deeplyNested.a.b.c.d.e.f.g,\n    })\n);\n","// @flow\n\nimport React from 'react';\n// import { Feedback } from '../common/Feedback';\n\nexport const RewiredFeedback = () => (\n    <div className=\"rewired-feedback\">\n        {/*<h3>Performance for one input</h3>*/}\n        {/*<Feedback id=\"rewired-performance-one-input\" />*/}\n        {/*<h3>Performance for deeply nested state</h3>*/}\n        {/*<Feedback id=\"rewired-performance-deeply-nested\" />*/}\n        {/*<h3>Performance for flat state</h3>*/}\n        {/*<Feedback id=\"rewired-performance-many-flat\" />*/}\n        {/*<h3>Performance for many wired components</h3>*/}\n        {/*<Feedback id=\"rewired-performance-many-components\" />*/}\n        {/*<h3>Scalability</h3>*/}\n        {/*<Feedback id=\"rewired-scalability\" />*/}\n        {/*<h3>Developer experience</h3>*/}\n        {/*<Feedback id=\"rewired-developer-experience\" />*/}\n        <h2>Here is the rewired application</h2>\n        Use the \"Menu\" to navigate through the different available tests\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst flatNames = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst manyFlatUpdate = (next: number): { [string]: number } =>\n    flatNames.reduce((p, c) => {\n        p[c] = next;\n        return p;\n    }, {});\n\nconst onClick = (num: number) => RewiredStore.set({ manyFlat: manyFlatUpdate(num) });\n\ntype RewiredManyFlatStoreProps = {| manyFlat: { [string]: number } |};\ntype RewiredManyFlatOwnProps = {||};\ntype RewiredManyFlatProps = {| ...RewiredManyFlatStoreProps, ...RewiredManyFlatOwnProps |};\n\nlet renderCounter = 0;\nconst RewiredManyFlatContainer = ({ manyFlat }: RewiredManyFlatProps) => (\n    <div className=\"many-flat\">\n        {Object.keys(manyFlat).map(key => (\n            <div className=\"key-and-num\" key={key}>\n                {key}: {manyFlat[key]}\n            </div>\n        ))}\n        <StressTest.ButtonDoX onClick={onClick} times={50000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const RewiredManyFlat = RewiredStore.wire<RewiredManyFlatStoreProps, RewiredManyFlatOwnProps>(\n    RewiredManyFlatContainer,\n    ({ manyFlat }) => ({ manyFlat })\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst componentNames = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\ntype RewiredComponentStoreProps = {| num: number |};\ntype RewiredComponentOwnProps = {| name: string |};\ntype RewiredComponentProps = {| ...RewiredComponentStoreProps, ...RewiredComponentOwnProps |};\n\nconst RewiredComponentContainer = ({ name, num }: RewiredComponentProps) => (\n    <div className=\"key-and-num\">\n        {name}: {num}\n    </div>\n);\n\nexport const RewiredComponent = RewiredStore.wire<RewiredComponentStoreProps, RewiredComponentOwnProps>(\n    RewiredComponentContainer,\n    ({ manyComponents }) => ({ num: manyComponents })\n);\n\nconst ManyComponents = (): Array<React$Node> =>\n    componentNames.map((name, key) => <RewiredComponent name={name} key={key} />);\n\nconst onClick = (num: number) => RewiredStore.set({ manyComponents: num });\n\nlet renderCounter = 0;\nexport const RewiredManyComponents = () => (\n    <div className=\"many-components\">\n        <ManyComponents />\n        <StressTest.ButtonDoX onClick={onClick} times={10000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredOneInput } from './RewiredOneInput';\nimport { type RouteValue } from '../routes';\nimport { RewiredDeeplyNested } from './RewiredDeeplyNested';\nimport { RewiredFeedback } from './RewiredFeedback';\nimport { RewiredManyFlat } from './RewiredManyFlat';\nimport { RewiredManyComponents } from './RewiredManyComponents';\n\ntype RewiredAppProps = {| current: RouteValue |};\n\nexport const RewiredAppContent = ({ current }: RewiredAppProps) => (\n    <div>\n        <div className=\"as-bg\">Rewired</div>\n        <div className=\"content\">\n            {current === 'start' && <RewiredFeedback />}\n            {current === 'one-input' && <RewiredOneInput />}\n            {current === 'deeply-nested' && <RewiredDeeplyNested />}\n            {current === 'many-flat' && <RewiredManyFlat />}\n            {current === 'many-components' && <RewiredManyComponents />}\n        </div>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { RewiredAppContent } from './RewiredAppContent';\nimport { type RouteValue } from '../routes';\n\ntype RewiredAppProps = {| current: RouteValue |};\n\nexport const RewiredApp = ({ current }: RewiredAppProps) => (\n    <RewiredStore.root>\n        <RewiredAppContent current={current} />\n    </RewiredStore.root>\n);\n","// @flow\n\nimport connect from 'react-redux/es/connect/connect';\nimport { DisplayValues } from '../common/DisplayValues';\n\nexport const ReduxDisplayValues = connect(data => ({ data }))(DisplayValues);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxDisplayValues } from './ReduxDisplayValues';\nimport { EventUtil } from '../common/event-util';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxOneInputProps = {| value: string, updateValue: Event => void, color: string |};\n\nconst ReduxOneInputContainer = ({ value, updateValue, color }: ReduxOneInputProps) => (\n    <div className=\"one-input\">\n        <ReduxDisplayValues />\n        <input id=\"redux-input\" type=\"text\" style={{ backgroundColor: color }} value={value} onChange={updateValue} />\n        <StressTest.ButtonChangeX inputId=\"redux-input\" times={10000} />\n    </div>\n);\n\nexport const ReduxOneInput = connect(\n    ({ oneInput }) => ({ value: oneInput.value, color: oneInput.color }),\n    dispatch => ({\n        updateValue: EventUtil.inputHandler(v => dispatch({ type: 'ONE_INPUT_CHANGED', change: v })),\n    })\n)(ReduxOneInputContainer);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxDeeplyNestedProps = {| num: number, update: number => void |};\n\nlet renderCounter = 0;\nconst ReduxDeeplyNestedContainer = ({ num, update }: ReduxDeeplyNestedProps) => (\n    <div className=\"deeply-nested\">\n        <div className=\"big-num\">{num}</div>\n        <StressTest.ButtonDoX onClick={update} times={100000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxDeeplyNested = connect(\n    ({ deeplyNested }) => ({ num: deeplyNested.a.b.c.d.e.f.g }),\n    dispatch => ({\n        update: num => dispatch({ type: 'DEEP_UPDATE', update: num }),\n    })\n)(ReduxDeeplyNestedContainer);\n","// @flow\n\nimport React from 'react';\n// import { Feedback } from '../common/Feedback';\n\nexport const ReduxFeedback = () => (\n    <div className=\"redux-feedback\">\n        {/*<h3>Performance for one input</h3>*/}\n        {/*<Feedback id=\"redux-performance-one-input\" />*/}\n        {/*<h3>Performance for deeply nested state</h3>*/}\n        {/*<Feedback id=\"redux-performance-deeply-nested\" />*/}\n        {/*<h3>Performance for flat state</h3>*/}\n        {/*<Feedback id=\"redux-performance-many-flat\" />*/}\n        {/*<h3>Performance for many connected components</h3>*/}\n        {/*<Feedback id=\"redux-performance-many-components\" />*/}\n        {/*<h3>Scalability</h3>*/}\n        {/*<Feedback id=\"redux-scalability\" />*/}\n        {/*<h3>Developer experience</h3>*/}\n        {/*<Feedback id=\"redux-developer-experience\" />*/}\n        <h2>Here is the redux application</h2>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxManyFlatProps = {| manyFlat: { [string]: number }, update: number => void |};\n\nlet renderCounter = 0;\nconst ReduxManyFlatContainer = ({ manyFlat, update }: ReduxManyFlatProps) => (\n    <div className=\"many-flat\">\n        {Object.keys(manyFlat).map(key => (\n            <div className=\"key-and-num\" key={key}>\n                {key}: {manyFlat[key]}\n            </div>\n        ))}\n        <StressTest.ButtonDoX onClick={update} times={50000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxManyFlat = connect(\n    ({ manyFlat }) => ({ manyFlat }),\n    dispatch => ({\n        update: num => dispatch({ type: 'FLAT_UPDATE', update: num }),\n    })\n)(ReduxManyFlatContainer);\n","// @flow\n\nimport React from 'react';\nimport { StressTest } from '../common/stress-test';\nimport { connect } from 'react-redux';\n\nconst componentNames = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\ntype ReduxComponentProps = {| name: string, num: number |};\n\nconst ReduxComponentContainer = ({ name, num }: ReduxComponentProps) => (\n    <div className=\"key-and-num\">\n        {name}: {num}\n    </div>\n);\n\nexport const ReduxComponent = connect(({ manyComponents }) => ({ num: manyComponents }))(ReduxComponentContainer);\n\nconst ManyComponents = (): Array<React$Node> =>\n    componentNames.map((name, key) => <ReduxComponent name={name} key={key} />);\n\ntype ReduxManyComponentsProps = {| update: number => void |};\n\nlet renderCounter = 0;\nexport const ReduxManyComponentsContainer = ({ update }: ReduxManyComponentsProps) => (\n    <div className=\"many-components\">\n        <ManyComponents />\n        <StressTest.ButtonDoX onClick={update} times={10000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxManyComponents = connect(\n    ({ manyFlat }) => ({ manyFlat }),\n    dispatch => ({\n        update: num => dispatch({ type: 'MANY_COMPONENTS_UPDATE', update: num }),\n    })\n)(ReduxManyComponentsContainer);\n","// @flow\n\nimport React from 'react';\nimport { ReduxOneInput } from './ReduxOneInput';\nimport { type RouteValue } from '../routes';\nimport { ReduxDeeplyNested } from './ReduxDeeplyNested';\nimport { ReduxFeedback } from './ReduxFeedback';\nimport { ReduxManyFlat } from './ReduxManyFlat';\nimport { ReduxManyComponents } from './ReduxManyComponents';\n\ntype ReduxAppProps = {| current: RouteValue |};\n\nexport const ReduxAppContent = ({ current }: ReduxAppProps) => (\n    <div>\n        <div className=\"as-bg\">Redux</div>\n        <div className=\"content\">\n            <div className=\"content\">\n                {current === 'start' && <ReduxFeedback />}\n                {current === 'one-input' && <ReduxOneInput />}\n                {current === 'deeply-nested' && <ReduxDeeplyNested />}\n                {current === 'many-flat' && <ReduxManyFlat />}\n                {current === 'many-components' && <ReduxManyComponents />}\n            </div>\n        </div>\n    </div>\n);\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport { type Action } from './action-types';\nimport { Util } from '../../common/util';\n\nconst valueReducer = (state: string = '', action: Action) => {\n    switch (action.type) {\n        case 'ONE_INPUT_CHANGED':\n            return action.change;\n        default:\n            return state;\n    }\n};\n\nconst colorReducer = (state: string = '#eeff8e', action: Action) => {\n    switch (action.type) {\n        case 'ONE_INPUT_CHANGED':\n            return Util.randomColor();\n        default:\n            return state;\n    }\n};\n\nexport const oneInputReducer = combineReducers({ value: valueReducer, color: colorReducer });\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst endpointReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'DEEP_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n\nexport const deeplyNestedReducer = combineReducers({\n    a: combineReducers({\n        b: combineReducers({\n            c: combineReducers({\n                d: combineReducers({ e: combineReducers({ f: combineReducers({ g: endpointReducer }) }) }),\n            }),\n        }),\n    }),\n});\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst flatReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'FLAT_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n\nconst flatReducers = 'abcdefghijklmnopqrstuvwxyz'.split('').reduce((p, c) => (p[c] = flatReducer) && p, {});\n\nexport const manyFlatReducer = combineReducers({\n    ...flatReducers,\n});\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst dummyReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        default:\n            return state;\n    }\n};\n\nexport const liveCodingReducer = combineReducers({ dummy: dummyReducer });\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport { oneInputReducer } from './one-input-reducer';\nimport { deeplyNestedReducer } from './deeply-nested-reducer';\nimport { manyFlatReducer } from './many-flat-reducer';\nimport { liveCodingReducer } from './live-coding-reducer';\nimport { manyComponentsReducer } from './many-components-reducer';\n\nexport const rootReducer = combineReducers({\n    oneInput: oneInputReducer,\n    deeplyNested: deeplyNestedReducer,\n    manyFlat: manyFlatReducer,\n    manyComponents: manyComponentsReducer,\n    liveCoding: liveCodingReducer,\n});\n","// @flow\n\nimport { type Action } from './action-types';\n\nexport const manyComponentsReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'MANY_COMPONENTS_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n","// @flow\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer/root-reducer';\n\nexport const ReduxStore = createStore(rootReducer, applyMiddleware(thunk));\n\nwindow.ReduxStore = ReduxStore;\n","// @flow\n\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ReduxAppContent } from './ReduxAppContent';\nimport { ReduxStore } from './redux-store';\nimport { type RouteValue } from '../routes';\n\ntype ReduxAppProps = {| current: RouteValue |};\n\nexport const ReduxApp = ({ current }: ReduxAppProps) => (\n    <Provider store={ReduxStore}>\n        <ReduxAppContent current={current} />\n    </Provider>\n);\n","// @flow\n\nexport type RouteValue = 'start' | 'one-input' | 'deeply-nested' | 'many-flat' | 'many-components' | 'live-coding';\nexport type Route = {| label: string, value: RouteValue |};\nexport const Routes: Route[] = [\n    { label: 'Start', value: 'start' },\n    { label: 'One Input', value: 'one-input' },\n    { label: 'Deeply nested', value: 'deeply-nested' },\n    { label: 'Many flat', value: 'many-flat' },\n    { label: 'Many components', value: 'many-components' },\n    { label: 'Live coding', value: 'live-coding' },\n];\n","// @flow\n\nimport React, { Component } from 'react';\nimport { type RouteValue, Routes } from './routes';\n\ntype NavigatorProps = {| navigate: RouteValue => void, current: RouteValue |};\ntype NavigatorState = {| open: boolean |};\n\nexport class Navigator extends Component<NavigatorProps, NavigatorState> {\n    state: NavigatorState = { open: false };\n    toggle = () => this.setState(({ open }) => ({ open: !open }));\n    navigate = (to: RouteValue) => () => {\n        const { current, navigate } = this.props;\n        if (current !== to) {\n            navigate(to);\n            this.setState({ open: false });\n        }\n    };\n    render = () => {\n        const { open } = this.state;\n        const { current } = this.props;\n        return (\n            <nav>\n                <div className=\"icon\" onClick={this.toggle}>\n                    Menu\n                </div>\n                {open && (\n                    <div className=\"menu\">\n                        {Routes.map(r => (\n                            <div\n                                key={r.value}\n                                className={'route' + (current === r.value ? ' current' : '')}\n                                onClick={this.navigate(r.value)}>\n                                {r.label}\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </nav>\n        );\n    };\n}\n","// @flow\n\nimport React, { Component } from 'react';\nimport { RewiredApp } from './rewired/RewiredApp';\nimport { ReduxApp } from './redux/ReduxApp';\nimport { type RouteValue } from './routes';\nimport { Navigator } from './Navigator';\n\ntype AppProps = {||};\ntype AppState = { current: RouteValue };\n\nclass App extends Component<AppProps, AppState> {\n    state: AppState = { current: (localStorage.getItem('current'): any) || 'start' };\n    navigate = (next: RouteValue) => {\n        localStorage.setItem('current', next);\n        this.setState({ current: next });\n    };\n    render() {\n        const { current } = this.state;\n        return (\n            <div className=\"App\">\n                <header>\n                    <Navigator navigate={this.navigate} current={current} />\n                    <div className=\"label\">Rewired vs. Redux</div>\n                </header>\n                <div className=\"rewired\">\n                    <RewiredApp current={current} />\n                </div>\n                <div className=\"redux\">\n                    <ReduxApp current={current} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// @flow\n\n// $FlowFixMe\nimport './assets/index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst root = document.getElementById('root');\nroot && ReactDOM.render(<App />, root);\n"],"sourceRoot":""}