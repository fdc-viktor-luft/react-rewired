{"version":3,"sources":["rewired/rewired-store.js","common/DisplayValues.js","rewired/RewiredDisplayValues.js","common/event-util.js","common/event-dispatcher.js","common/stress-test.js","common/util.js","rewired/RewiredOneInput.js","rewired/RewiredDeeplyNested.js","rewired/RewiredFeedback.js","rewired/RewiredManyFlat.js","rewired/RewiredManyComponents.js","rewired/RewiredAppContent.js","rewired/RewiredApp.js","redux/ReduxDisplayValues.js","redux/ReduxOneInput.js","redux/ReduxDeeplyNested.js","redux/ReduxFeedback.js","redux/ReduxManyFlat.js","redux/ReduxManyComponents.js","redux/ReduxAppContent.js","redux/reducer/one-input-reducer.js","redux/reducer/deeply-nested-reducer.js","redux/reducer/many-flat-reducer.js","redux/reducer/live-coding-reducer.js","redux/reducer/root-reducer.js","redux/reducer/many-components-reducer.js","redux/redux-store.js","redux/ReduxApp.js","routes.js","Navigator.js","App.js","index.js"],"names":["deeplyNested","Wired","node","a","b","c","d","e","f","g","initialManyFlat","split","reduce","p","RewiredStore","store","oneInput","value","color","manyFlat","liveCoding","manyComponents","window","sanitize","str","replace","span","className","concat","withMargin","innerHTML","htmlForObject","o","_htmlForObject","result","firstValue","arguments","length","undefined","key","hasOwnProperty","valueType","String","Array","isArray","JSON","stringify","DisplayValues","_ref","data","react_default","createElement","dangerouslySetInnerHTML","__html","RewiredDisplayValues","wire","EventUtil","cb","event","preventDefault","target","change","type","parsed","Number","isNaN","convertToNumber","nativeInputValueSetter","Object","getOwnPropertyDescriptor","HTMLInputElement","prototype","set","inputElement","call","Event","bubbles","dispatchEvent","EventDispatcher","doXTimes","times","handler","counter","start","performance","now","_handler","console","log","Math","ceil","i","setTimeout","changeXTimesInput","inputId","input","document","getElementById","tagName","toLowerCase","index","uuid","random","toString","StressTest","onClick","_ref2","Util","floor","onChangeInput","v","RewiredOneInput","id","style","backgroundColor","onChange","num","renderCounter","RewiredDeeplyNested","RewiredFeedback","flatNames","next","RewiredManyFlat","keys","map","componentNames","RewiredComponent","name","ManyComponents","RewiredManyComponents","RewiredManyComponents_ManyComponents","RewiredAppContent","current","RewiredFeedback_RewiredFeedback","RewiredManyComponents_RewiredManyComponents","RewiredApp","root","RewiredAppContent_RewiredAppContent","ReduxDisplayValues","connect","ReduxOneInput","dispatch","updateValue","ReduxDeeplyNested","update","ReduxFeedback","ReduxManyFlat","ReduxComponent","ReduxManyComponents","_ref4","_ref3","ReduxManyComponents_ManyComponents","ReduxAppContent","ReduxFeedback_ReduxFeedback","oneInputReducer","combineReducers","state","action","deeplyNestedReducer","flatReducer","flatReducers","manyFlatReducer","objectSpread","liveCodingReducer","dummy","rootReducer","ReduxStore","createStore","applyMiddleware","thunk","ReduxApp","es","ReduxAppContent_ReduxAppContent","Routes","label","Navigator","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","_key","possibleConstructorReturn","getPrototypeOf","apply","open","toggle","setState","navigate","to","_this$props","props","render","r","inherits","Component","App","localStorage","getItem","setItem","Navigator_Navigator","RewiredApp_RewiredApp","ReduxApp_ReduxApp","ReactDOM","src_App"],"mappings":"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","file":"static/js/main.e7d72c8c.chunk.js","sourcesContent":["// @flow\n\nimport { Wired, type WiredNode } from 'react-rewired';\n\ntype OneInputState = { value: string, color: string };\nconst initialOneInput = {\n    value: '',\n    color: '#eeff8e',\n};\n\ntype DeeplyNestedState = {\n    a: WiredNode<{\n        b: WiredNode<{ c: WiredNode<{ d: WiredNode<{ e: WiredNode<{ f: WiredNode<{ g: number }> }> }> }> }>,\n    }>,\n};\n\nexport const deeplyNested = Wired.node<DeeplyNestedState>({\n    a: Wired.node({\n        b: Wired.node({\n            c: Wired.node({ d: Wired.node({ e: Wired.node({ f: Wired.node({ g: 0 }) }) }) }),\n        }),\n    }),\n});\n\nconst initialManyFlat: { [string]: number } = 'abcdefghijklmnopqrstuvwxyz'\n    .split('')\n    .reduce((p, c) => (p[c] = 0) || p, {});\n\ntype LifeCodingState = {};\n\ntype State = {\n    oneInput: WiredNode<OneInputState>,\n    deeplyNested: typeof deeplyNested,\n    manyFlat: typeof initialManyFlat,\n    liveCoding: WiredNode<LifeCodingState>,\n    manyComponents: number,\n};\n\nexport const RewiredStore = Wired.store<State>({\n    oneInput: Wired.node(initialOneInput),\n    deeplyNested,\n    manyFlat: Wired.node(initialManyFlat),\n    liveCoding: Wired.node({}),\n    manyComponents: 0,\n});\n\nwindow.RewiredStore = RewiredStore;\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\n\nconst sanitize = (str: string): string => {\n    return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\nconst span = (className: string, value: string): string => `<span class=\"${className}\">${value}</span>`;\n\nconst withMargin = (innerHTML: string): string => `<div class=\"ml-3\"><p>${innerHTML}</p></div>`;\n\nconst _htmlForObject = (o: Object, firstValueOverride: boolean = true): string => {\n    let result = '';\n    let firstValue = firstValueOverride;\n    for (let key in o) {\n        if (o.hasOwnProperty(key)) {\n            const value = o[key];\n            if (!firstValue) {\n                result += ',</p><p>';\n            } else {\n                firstValue = false;\n            }\n            result += span('prop', key);\n            result += ': ';\n            const valueType = value === null ? 'null' : typeof value;\n            switch (valueType) {\n                case 'string':\n                    result += span('string', `\"${sanitize((value: any))}\"`);\n                    continue;\n                case 'boolean':\n                case 'number':\n                case 'undefined':\n                case 'null':\n                    result += span(valueType, String(value));\n                    continue;\n                case 'object':\n                    if (Array.isArray(value)) {\n                        result += sanitize(JSON.stringify(value));\n                    } else {\n                        result += `{</p>${withMargin(_htmlForObject((value: any)))}<p>}`;\n                    }\n                    continue;\n                default:\n                    result += sanitize(JSON.stringify(value));\n            }\n        }\n    }\n    return result;\n};\n\nconst htmlForObject = (o: Object): string => `<p>{</p>${withMargin(_htmlForObject(o))}</p>}`;\n\ntype DisplayValuesProps = {| data: Object |};\nexport const DisplayValues = ({ data }: DisplayValuesProps) => (\n    <pre>\n        <code dangerouslySetInnerHTML={{ __html: htmlForObject(data) }} />\n    </pre>\n);\n","// @flow\n\nimport { RewiredStore } from './rewired-store';\nimport { DisplayValues } from '../common/DisplayValues';\n\ntype RewiredDisplayValuesStoreProps = {| data: Object |};\ntype RewiredDisplayValuesOwnProps = {||};\n\nexport const RewiredDisplayValues = RewiredStore.wire<RewiredDisplayValuesStoreProps, RewiredDisplayValuesOwnProps>(\n    DisplayValues,\n    data => ({ data })\n);\n","/**\n * This file is part of svg-editor which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\ntype InputEvent = { preventDefault: Function, target: { type?: string, value: any } };\ntype InputEventHandler = InputEvent => void;\n\nconst convertToNumber = (value: string): number | void => {\n    if (!value) return undefined;\n    const parsed = Number(value);\n    return isNaN(parsed) ? undefined : parsed;\n};\n\nconst inputHandler = (cb?: any => mixed | void): InputEventHandler => event => {\n    event.preventDefault();\n    const target = event.target;\n    const change = target.value;\n    const value = target.type === 'number' ? convertToNumber(change) : change;\n    if (cb) cb(value);\n};\n\nexport const EventUtil = { inputHandler };\n","// @flow\n\nconst nativeInputValueSetter = (Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value'): any).set;\n\nconst change = (inputElement: any, value: string) => {\n    nativeInputValueSetter.call(inputElement, value);\n    const e = new Event('input', { bubbles: true });\n    inputElement.dispatchEvent(e);\n};\n\nconst changeById = (id: string, value: string) => {\n    const input = document.getElementById(id);\n    if (input && input.tagName === 'input') change(input, value);\n};\n\nexport const EventDispatcher = { change, changeById };\n","// @flow\n\nimport React from 'react';\nimport { EventDispatcher } from './event-dispatcher';\n\n// optimized as much as possible\n// call this function without arguments to generate a new uuid\ntype UuidParam = void;\nconst uuid = (a: UuidParam): string =>\n    a ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16) : (([1e7]: any) + -1e3 + -4e3).replace(/[018]/g, uuid);\n\nconst doXTimes = (times: number, handler: number => void) => () => {\n    let counter = 0;\n    const start = performance.now();\n    const _handler = () => {\n        counter++;\n        handler(counter);\n        if (counter === times) console.log('duration ms', Math.ceil(performance.now() - start));\n    };\n    for (let i = 0; i < times; i++) window.setTimeout(_handler, 0);\n};\n\nconst changeXTimesInput = (times: number, inputId: string) => () => {\n    const input = document.getElementById(inputId);\n    if (input && input.tagName.toLowerCase() === 'input')\n        doXTimes(times, index => EventDispatcher.change(input, String(index) + ' - ' + uuid()))();\n};\n\n// 100'000 changes take for both ~ 200 sec\n// 10'000 changes take for both ~ 15 - 16 sec --> should be the ideal choice for demonstration\n// 1'000 changes take for both ~ 1.5 - 1.6 sec\nconst ButtonChangeX = ({ inputId, times }: {| inputId: string, times: number |}) => (\n    <button onClick={changeXTimesInput(times, inputId)}>Change {times} times</button>\n);\n\nconst ButtonDoX = ({ onClick, times }: {| onClick: number => void, times: number |}) => (\n    <button onClick={doXTimes(times, onClick)}>Do {times} times</button>\n);\n\nexport const StressTest = { ButtonChangeX, ButtonDoX };\n","// @flow\n\nconst randomColor = () => '#xxxxxx'.replace(/x/g, () => Math.floor(Math.random() * 16).toString(16));\n\nexport const Util = { randomColor };\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { RewiredDisplayValues } from './RewiredDisplayValues';\nimport { EventUtil } from '../common/event-util';\nimport { StressTest } from '../common/stress-test';\nimport { Util } from '../common/util';\n\nconst onChangeInput = EventUtil.inputHandler(v =>\n    RewiredStore.set({ oneInput: { value: v, color: Util.randomColor() } })\n);\n\ntype RewiredOneInputStoreProps = {| value: string, color: string |};\ntype RewiredOneInputOwnProps = {||};\nexport type RewiredOneInputProps = {| ...RewiredOneInputStoreProps, ...RewiredOneInputOwnProps |};\n\nexport const RewiredOneInputContainer = ({ value, color }: RewiredOneInputProps) => (\n    <div className=\"one-input\">\n        <RewiredDisplayValues />\n        <input\n            id=\"rewired-input\"\n            type=\"text\"\n            value={value}\n            style={{ backgroundColor: color }}\n            onChange={onChangeInput}\n        />\n        <StressTest.ButtonChangeX inputId=\"rewired-input\" times={10000} />\n    </div>\n);\n\nexport const RewiredOneInput = RewiredStore.wire<RewiredOneInputStoreProps, RewiredOneInputOwnProps>(\n    RewiredOneInputContainer,\n    ({ oneInput }) => ({\n        value: oneInput.value,\n        color: oneInput.color,\n    })\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst onClick = (num: number) =>\n    RewiredStore.set({ deeplyNested: { a: { b: { c: { d: { e: { f: { g: num } } } } } } } });\n\ntype RewiredDeeplyNestedStoreProps = {| num: number |};\ntype RewiredDeeplyNestedOwnProps = {||};\ntype RewiredDeeplyNestedProps = {| ...RewiredDeeplyNestedStoreProps, ...RewiredDeeplyNestedOwnProps |};\n\nlet renderCounter = 0;\nconst RewiredDeeplyNestedContainer = ({ num }: RewiredDeeplyNestedProps) => (\n    <div className=\"deeply-nested\">\n        <div className=\"big-num\">{num}</div>\n        <StressTest.ButtonDoX onClick={onClick} times={100000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const RewiredDeeplyNested = RewiredStore.wire<RewiredDeeplyNestedStoreProps, RewiredDeeplyNestedOwnProps>(\n    RewiredDeeplyNestedContainer,\n    ({ deeplyNested }) => ({\n        num: deeplyNested.a.b.c.d.e.f.g,\n    })\n);\n","// @flow\n\nimport React from 'react';\n// import { Feedback } from '../common/Feedback';\n\nexport const RewiredFeedback = () => (\n    <div className=\"rewired-feedback\">\n        {/*<h3>Performance for one input</h3>*/}\n        {/*<Feedback id=\"rewired-performance-one-input\" />*/}\n        {/*<h3>Performance for deeply nested state</h3>*/}\n        {/*<Feedback id=\"rewired-performance-deeply-nested\" />*/}\n        {/*<h3>Performance for flat state</h3>*/}\n        {/*<Feedback id=\"rewired-performance-many-flat\" />*/}\n        {/*<h3>Performance for many wired components</h3>*/}\n        {/*<Feedback id=\"rewired-performance-many-components\" />*/}\n        {/*<h3>Scalability</h3>*/}\n        {/*<Feedback id=\"rewired-scalability\" />*/}\n        {/*<h3>Developer experience</h3>*/}\n        {/*<Feedback id=\"rewired-developer-experience\" />*/}\n        <h2>Here is the rewired application</h2>\n        Use the \"Menu\" to navigate through the different available tests\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst flatNames = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\nconst manyFlatUpdate = (next: number): { [string]: number } =>\n    flatNames.reduce((p, c) => {\n        p[c] = next;\n        return p;\n    }, {});\n\nconst onClick = (num: number) => RewiredStore.set({ manyFlat: manyFlatUpdate(num) });\n\ntype RewiredManyFlatStoreProps = {| manyFlat: { [string]: number } |};\ntype RewiredManyFlatOwnProps = {||};\ntype RewiredManyFlatProps = {| ...RewiredManyFlatStoreProps, ...RewiredManyFlatOwnProps |};\n\nlet renderCounter = 0;\nconst RewiredManyFlatContainer = ({ manyFlat }: RewiredManyFlatProps) => (\n    <div className=\"many-flat\">\n        {Object.keys(manyFlat).map(key => (\n            <div className=\"key-and-num\" key={key}>\n                {key}: {manyFlat[key]}\n            </div>\n        ))}\n        <StressTest.ButtonDoX onClick={onClick} times={50000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const RewiredManyFlat = RewiredStore.wire<RewiredManyFlatStoreProps, RewiredManyFlatOwnProps>(\n    RewiredManyFlatContainer,\n    ({ manyFlat }) => ({ manyFlat })\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { StressTest } from '../common/stress-test';\n\nconst componentNames = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\ntype RewiredComponentStoreProps = {| num: number |};\ntype RewiredComponentOwnProps = {| name: string |};\ntype RewiredComponentProps = {| ...RewiredComponentStoreProps, ...RewiredComponentOwnProps |};\n\nconst RewiredComponentContainer = ({ name, num }: RewiredComponentProps) => (\n    <div className=\"key-and-num\">\n        {name}: {num}\n    </div>\n);\n\nexport const RewiredComponent = RewiredStore.wire<RewiredComponentStoreProps, RewiredComponentOwnProps>(\n    RewiredComponentContainer,\n    ({ manyComponents }) => ({ num: manyComponents })\n);\n\nconst ManyComponents = (): Array<React$Node> =>\n    componentNames.map((name, key) => <RewiredComponent name={name} key={key} />);\n\nconst onClick = (num: number) => RewiredStore.set({ manyComponents: num });\n\nlet renderCounter = 0;\nexport const RewiredManyComponents = () => (\n    <div className=\"many-components\">\n        <ManyComponents />\n        <StressTest.ButtonDoX onClick={onClick} times={10000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredOneInput } from './RewiredOneInput';\nimport { type RouteValue } from '../routes';\nimport { RewiredDeeplyNested } from './RewiredDeeplyNested';\nimport { RewiredFeedback } from './RewiredFeedback';\nimport { RewiredManyFlat } from './RewiredManyFlat';\nimport { RewiredManyComponents } from './RewiredManyComponents';\n\ntype RewiredAppProps = {| current: RouteValue |};\n\nexport const RewiredAppContent = ({ current }: RewiredAppProps) => (\n    <div>\n        <div className=\"as-bg\">Rewired</div>\n        <div className=\"content\">\n            {current === 'start' && <RewiredFeedback />}\n            {current === 'one-input' && <RewiredOneInput />}\n            {current === 'deeply-nested' && <RewiredDeeplyNested />}\n            {current === 'many-flat' && <RewiredManyFlat />}\n            {current === 'many-components' && <RewiredManyComponents />}\n        </div>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { RewiredStore } from './rewired-store';\nimport { RewiredAppContent } from './RewiredAppContent';\nimport { type RouteValue } from '../routes';\n\ntype RewiredAppProps = {| current: RouteValue |};\n\nexport const RewiredApp = ({ current }: RewiredAppProps) => (\n    <RewiredStore.root>\n        <RewiredAppContent current={current} />\n    </RewiredStore.root>\n);\n","// @flow\n\nimport connect from 'react-redux/es/connect/connect';\nimport { DisplayValues } from '../common/DisplayValues';\n\nexport const ReduxDisplayValues = connect(data => ({ data }))(DisplayValues);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ReduxDisplayValues } from './ReduxDisplayValues';\nimport { EventUtil } from '../common/event-util';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxOneInputProps = {| value: string, updateValue: Event => void, color: string |};\n\nconst ReduxOneInputContainer = ({ value, updateValue, color }: ReduxOneInputProps) => (\n    <div className=\"one-input\">\n        <ReduxDisplayValues />\n        <input id=\"redux-input\" type=\"text\" style={{ backgroundColor: color }} value={value} onChange={updateValue} />\n        <StressTest.ButtonChangeX inputId=\"redux-input\" times={10000} />\n    </div>\n);\n\nexport const ReduxOneInput = connect(\n    ({ oneInput }) => ({ value: oneInput.value, color: oneInput.color }),\n    dispatch => ({\n        updateValue: EventUtil.inputHandler(v => dispatch({ type: 'ONE_INPUT_CHANGED', change: v })),\n    })\n)(ReduxOneInputContainer);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxDeeplyNestedProps = {| num: number, update: number => void |};\n\nlet renderCounter = 0;\nconst ReduxDeeplyNestedContainer = ({ num, update }: ReduxDeeplyNestedProps) => (\n    <div className=\"deeply-nested\">\n        <div className=\"big-num\">{num}</div>\n        <StressTest.ButtonDoX onClick={update} times={100000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxDeeplyNested = connect(\n    ({ deeplyNested }) => ({ num: deeplyNested.a.b.c.d.e.f.g }),\n    dispatch => ({\n        update: num => dispatch({ type: 'DEEP_UPDATE', update: num }),\n    })\n)(ReduxDeeplyNestedContainer);\n","// @flow\n\nimport React from 'react';\n// import { Feedback } from '../common/Feedback';\n\nexport const ReduxFeedback = () => (\n    <div className=\"redux-feedback\">\n        {/*<h3>Performance for one input</h3>*/}\n        {/*<Feedback id=\"redux-performance-one-input\" />*/}\n        {/*<h3>Performance for deeply nested state</h3>*/}\n        {/*<Feedback id=\"redux-performance-deeply-nested\" />*/}\n        {/*<h3>Performance for flat state</h3>*/}\n        {/*<Feedback id=\"redux-performance-many-flat\" />*/}\n        {/*<h3>Performance for many connected components</h3>*/}\n        {/*<Feedback id=\"redux-performance-many-components\" />*/}\n        {/*<h3>Scalability</h3>*/}\n        {/*<Feedback id=\"redux-scalability\" />*/}\n        {/*<h3>Developer experience</h3>*/}\n        {/*<Feedback id=\"redux-developer-experience\" />*/}\n        <h2>Here is the redux application</h2>\n    </div>\n);\n","// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { StressTest } from '../common/stress-test';\n\ntype ReduxManyFlatProps = {| manyFlat: { [string]: number }, update: number => void |};\n\nlet renderCounter = 0;\nconst ReduxManyFlatContainer = ({ manyFlat, update }: ReduxManyFlatProps) => (\n    <div className=\"many-flat\">\n        {Object.keys(manyFlat).map(key => (\n            <div className=\"key-and-num\" key={key}>\n                {key}: {manyFlat[key]}\n            </div>\n        ))}\n        <StressTest.ButtonDoX onClick={update} times={50000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxManyFlat = connect(\n    ({ manyFlat }) => ({ manyFlat }),\n    dispatch => ({\n        update: num => dispatch({ type: 'FLAT_UPDATE', update: num }),\n    })\n)(ReduxManyFlatContainer);\n","// @flow\n\nimport React from 'react';\nimport { StressTest } from '../common/stress-test';\nimport { connect } from 'react-redux';\n\nconst componentNames = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\ntype ReduxComponentProps = {| name: string, num: number |};\n\nconst ReduxComponentContainer = ({ name, num }: ReduxComponentProps) => (\n    <div className=\"key-and-num\">\n        {name}: {num}\n    </div>\n);\n\nexport const ReduxComponent = connect(({ manyComponents }) => ({ num: manyComponents }))(ReduxComponentContainer);\n\nconst ManyComponents = (): Array<React$Node> =>\n    componentNames.map((name, key) => <ReduxComponent name={name} key={key} />);\n\ntype ReduxManyComponentsProps = {| update: number => void |};\n\nlet renderCounter = 0;\nexport const ReduxManyComponentsContainer = ({ update }: ReduxManyComponentsProps) => (\n    <div className=\"many-components\">\n        <ManyComponents />\n        <StressTest.ButtonDoX onClick={update} times={10000} />\n        <div className=\"render-counter\">{++renderCounter}</div>\n    </div>\n);\n\nexport const ReduxManyComponents = connect(\n    ({ manyFlat }) => ({ manyFlat }),\n    dispatch => ({\n        update: num => dispatch({ type: 'MANY_COMPONENTS_UPDATE', update: num }),\n    })\n)(ReduxManyComponentsContainer);\n","// @flow\n\nimport React from 'react';\nimport { ReduxOneInput } from './ReduxOneInput';\nimport { type RouteValue } from '../routes';\nimport { ReduxDeeplyNested } from './ReduxDeeplyNested';\nimport { ReduxFeedback } from './ReduxFeedback';\nimport { ReduxManyFlat } from './ReduxManyFlat';\nimport { ReduxManyComponents } from './ReduxManyComponents';\n\ntype ReduxAppProps = {| current: RouteValue |};\n\nexport const ReduxAppContent = ({ current }: ReduxAppProps) => (\n    <div>\n        <div className=\"as-bg\">Redux</div>\n        <div className=\"content\">\n            <div className=\"content\">\n                {current === 'start' && <ReduxFeedback />}\n                {current === 'one-input' && <ReduxOneInput />}\n                {current === 'deeply-nested' && <ReduxDeeplyNested />}\n                {current === 'many-flat' && <ReduxManyFlat />}\n                {current === 'many-components' && <ReduxManyComponents />}\n            </div>\n        </div>\n    </div>\n);\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport { type Action } from './action-types';\nimport { Util } from '../../common/util';\n\nconst valueReducer = (state: string = '', action: Action) => {\n    switch (action.type) {\n        case 'ONE_INPUT_CHANGED':\n            return action.change;\n        default:\n            return state;\n    }\n};\n\nconst colorReducer = (state: string = '#eeff8e', action: Action) => {\n    switch (action.type) {\n        case 'ONE_INPUT_CHANGED':\n            return Util.randomColor();\n        default:\n            return state;\n    }\n};\n\nexport const oneInputReducer = combineReducers({ value: valueReducer, color: colorReducer });\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst endpointReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'DEEP_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n\nexport const deeplyNestedReducer = combineReducers({\n    a: combineReducers({\n        b: combineReducers({\n            c: combineReducers({\n                d: combineReducers({ e: combineReducers({ f: combineReducers({ g: endpointReducer }) }) }),\n            }),\n        }),\n    }),\n});\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst flatReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'FLAT_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n\nconst flatReducers = 'abcdefghijklmnopqrstuvwxyz'.split('').reduce((p, c) => (p[c] = flatReducer) && p, {});\n\nexport const manyFlatReducer = combineReducers({\n    ...flatReducers,\n});\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport type { Action } from './action-types';\n\nconst dummyReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        default:\n            return state;\n    }\n};\n\nexport const liveCodingReducer = combineReducers({ dummy: dummyReducer });\n","// @flow\n\nimport { combineReducers } from 'redux';\nimport { oneInputReducer } from './one-input-reducer';\nimport { deeplyNestedReducer } from './deeply-nested-reducer';\nimport { manyFlatReducer } from './many-flat-reducer';\nimport { liveCodingReducer } from './live-coding-reducer';\nimport { manyComponentsReducer } from './many-components-reducer';\n\nexport const rootReducer = combineReducers({\n    oneInput: oneInputReducer,\n    deeplyNested: deeplyNestedReducer,\n    manyFlat: manyFlatReducer,\n    manyComponents: manyComponentsReducer,\n    liveCoding: liveCodingReducer,\n});\n","// @flow\n\nimport { type Action } from './action-types';\n\nexport const manyComponentsReducer = (state: number = 0, action: Action) => {\n    switch (action.type) {\n        case 'MANY_COMPONENTS_UPDATE':\n            return action.update;\n        default:\n            return state;\n    }\n};\n","// @flow\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer/root-reducer';\n\nexport const ReduxStore = createStore(rootReducer, applyMiddleware(thunk));\n\nwindow.ReduxStore = ReduxStore;\n","// @flow\n\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ReduxAppContent } from './ReduxAppContent';\nimport { ReduxStore } from './redux-store';\nimport { type RouteValue } from '../routes';\n\ntype ReduxAppProps = {| current: RouteValue |};\n\nexport const ReduxApp = ({ current }: ReduxAppProps) => (\n    <Provider store={ReduxStore}>\n        <ReduxAppContent current={current} />\n    </Provider>\n);\n","// @flow\n\nexport type RouteValue = 'start' | 'one-input' | 'deeply-nested' | 'many-flat' | 'many-components' | 'live-coding';\nexport type Route = {| label: string, value: RouteValue |};\nexport const Routes: Route[] = [\n    { label: 'Start', value: 'start' },\n    { label: 'One Input', value: 'one-input' },\n    { label: 'Deeply nested', value: 'deeply-nested' },\n    { label: 'Many flat', value: 'many-flat' },\n    { label: 'Many components', value: 'many-components' },\n    { label: 'Live coding', value: 'live-coding' },\n];\n","// @flow\n\nimport React, { Component } from 'react';\nimport { type RouteValue, Routes } from './routes';\n\ntype NavigatorProps = {| navigate: RouteValue => void, current: RouteValue |};\ntype NavigatorState = {| open: boolean |};\n\nexport class Navigator extends Component<NavigatorProps, NavigatorState> {\n    state: NavigatorState = { open: false };\n    toggle = () => this.setState(({ open }) => ({ open: !open }));\n    navigate = (to: RouteValue) => () => {\n        const { current, navigate } = this.props;\n        if (current !== to) {\n            navigate(to);\n            this.setState({ open: false });\n        }\n    };\n    render = () => {\n        const { open } = this.state;\n        const { current } = this.props;\n        return (\n            <nav>\n                <div className=\"icon\" onClick={this.toggle}>\n                    Menu\n                </div>\n                {open && (\n                    <div className=\"menu\">\n                        {Routes.map(r => (\n                            <div\n                                key={r.value}\n                                className={'route' + (current === r.value ? ' current' : '')}\n                                onClick={this.navigate(r.value)}>\n                                {r.label}\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </nav>\n        );\n    };\n}\n","// @flow\n\nimport React, { Component } from 'react';\nimport { RewiredApp } from './rewired/RewiredApp';\nimport { ReduxApp } from './redux/ReduxApp';\nimport { type RouteValue } from './routes';\nimport { Navigator } from './Navigator';\n\ntype AppProps = {||};\ntype AppState = { current: RouteValue };\n\nclass App extends Component<AppProps, AppState> {\n    state: AppState = { current: (localStorage.getItem('current'): any) || 'start' };\n    navigate = (next: RouteValue) => {\n        localStorage.setItem('current', next);\n        this.setState({ current: next });\n    };\n    render() {\n        const { current } = this.state;\n        return (\n            <div className=\"App\">\n                <header>\n                    <Navigator navigate={this.navigate} current={current} />\n                    <div className=\"label\">Rewired vs. Redux</div>\n                </header>\n                <div className=\"rewired\">\n                    <RewiredApp current={current} />\n                </div>\n                <div className=\"redux\">\n                    <ReduxApp current={current} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// @flow\n\n// $FlowFixMe\nimport './assets/index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst root = document.getElementById('root');\nroot && ReactDOM.render(<App />, root);\n"],"sourceRoot":""}